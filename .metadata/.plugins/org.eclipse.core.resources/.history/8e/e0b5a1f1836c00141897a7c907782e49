package com.example.weatherdresser;

import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.json.JSONArray;
import org.json.JSONObject;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import com.facebook.*;
import com.facebook.model.GraphPlace;
import com.facebook.model.GraphUser;
import com.facebook.widget.LoginButton;
import com.twilio.sdk.TwilioRestException;

import android.content.Intent;
import android.content.IntentSender.SendIntentException;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;

public class MainFragment extends Fragment {
	private String LOCATION;
	private String EMAIL;
	private String NAME;
	private static final String TAG = "MainFragment";
	private UiLifecycleHelper uiHelper;
	private TextView userInfoTextView;
	private Session.StatusCallback callback = new Session.StatusCallback() {
		@Override
		public void call(Session session, SessionState state,
				Exception exception) {
			onSessionStateChange(session, state, exception);
		}
	};

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		uiHelper = new UiLifecycleHelper(getActivity(), callback);
		uiHelper.onCreate(savedInstanceState);
		View view = inflater.inflate(R.layout.main, container, false);
		LoginButton authButton = (LoginButton) view
				.findViewById(R.id.authButton);
		authButton.setFragment(this);
		authButton.setReadPermissions(Arrays.asList("email", "user_location"));

		userInfoTextView = (TextView) view.findViewById(R.id.userInfoTextView);

		return view;
	}

	private void onSessionStateChange(Session session, SessionState state,
			Exception exception) {
		if (state.isOpened()) {
			Log.i(TAG, "Logged in...");
			userInfoTextView.setVisibility(View.VISIBLE);

			Request.executeMeRequestAsync(session,
					new Request.GraphUserCallback() {

						@Override
						public void onCompleted(GraphUser user,
								Response response) {
							if (user != null) {
								// Build URL
								URL url = null;
								String temp = "1";
								String URL = "http://api.worldweatheronline.com/free/v2/weather.ashx?q="
										+ getLocation(user)
										+ "&format=xml&num_of_days=1&key=87d42f18cf1734ef07e13821679de";
								// Display the parsed user info
								try {
									url = new URL(URL);
									HttpURLConnection con = (HttpURLConnection) url
											.openConnection();
									DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory
											.newInstance();
									DocumentBuilder docBuilder = docBuilderFactory
											.newDocumentBuilder();
									Document doc = docBuilder.parse(con
											.getInputStream());
									doc.getDocumentElement().normalize();
									NodeList currentCondition = doc
											.getElementsByTagName("current_condition");

									Element currentConditionElement = (Element) currentCondition
											.item(0);
									temp = ((Element) currentConditionElement
											.getElementsByTagName("temp_C")
											.item(0)).getChildNodes().item(0)
											.getNodeValue().trim();

								} catch (MalformedURLException e) {
									// TODO Auto-generated catch block
									// Log.d(LocationUtils.APPTAG,
									// e.getMessage());
								} catch (IOException ex) {
									ex.printStackTrace();
								} catch (SAXException ex) {
									ex.printStackTrace();
								} catch (ParserConfigurationException ex) {
									ex.printStackTrace();
								}
								if (Integer.getInteger(temp)<20)
								{
									SmsSender send = new SmsSender();
									try {
										send.sendSms("", "+12095072194");
									} catch (TwilioRestException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
								}
								else
								{
									SmsSender send = new SmsSender();
									try {
										send.sendSms("", "+12095072194");
									} catch (TwilioRestException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
								}

								userInfoTextView.setText("Notification Pushed");
							}
						}
					});

		} else if (state.isClosed()) {
			Log.i(TAG, "Logged out...");
			userInfoTextView.setVisibility(View.INVISIBLE);
		}
	}

	private String buildUserInfoDisplay(GraphUser user) {
		StringBuilder userInfo = new StringBuilder("");

		NAME = user.getName();
		LOCATION = user.getLocation().getName();
		EMAIL = (String) user.getProperty("email");

		userInfo.append(NAME);
		userInfo.append(LOCATION);
		userInfo.append(EMAIL);

		return userInfo.toString();
	}

	private String getName(GraphUser user) {
		return user.getName();
	}

	private String getLocation(GraphUser user) {
		return user.getLocation().getName();
	}

	private String getEmail(GraphUser user) {
		return (String) user.getProperty("email");
	}

	@Override
	public void onResume() {
		super.onResume();
		Session session = Session.getActiveSession();
		if (session != null && (session.isOpened() || session.isClosed())) {
			onSessionStateChange(session, session.getState(), null);
		}

		// uiHelper.onResume();
	}

	@Override
	public void onActivityResult(int requestCode, int resultCode, Intent data) {
		super.onActivityResult(requestCode, resultCode, data);
		uiHelper.onActivityResult(requestCode, resultCode, data);

	}

	@Override
	public void onPause() {
		super.onPause();
		uiHelper.onPause();
	}

	@Override
	public void onDestroy() {
		super.onDestroy();
		uiHelper.onDestroy();
	}

	@Override
	public void onSaveInstanceState(Bundle outState) {
		super.onSaveInstanceState(outState);
		uiHelper.onSaveInstanceState(outState);
	}
}
